// Code generated by "enumer -type HandlerType -json -yaml -text -values -output logger_string.go"; DO NOT EDIT.

package configx

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _HandlerTypeName = "HandlerTypeTextHandlerTypeJson"

var _HandlerTypeIndex = [...]uint8{0, 15, 30}

const _HandlerTypeLowerName = "handlertypetexthandlertypejson"

func (i HandlerType) String() string {
	if i >= HandlerType(len(_HandlerTypeIndex)-1) {
		return fmt.Sprintf("HandlerType(%d)", i)
	}
	return _HandlerTypeName[_HandlerTypeIndex[i]:_HandlerTypeIndex[i+1]]
}

func (HandlerType) Values() []string {
	return HandlerTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _HandlerTypeNoOp() {
	var x [1]struct{}
	_ = x[HandlerTypeText-(0)]
	_ = x[HandlerTypeJson-(1)]
}

var _HandlerTypeValues = []HandlerType{HandlerTypeText, HandlerTypeJson}

var _HandlerTypeNameToValueMap = map[string]HandlerType{
	_HandlerTypeName[0:15]:       HandlerTypeText,
	_HandlerTypeLowerName[0:15]:  HandlerTypeText,
	_HandlerTypeName[15:30]:      HandlerTypeJson,
	_HandlerTypeLowerName[15:30]: HandlerTypeJson,
}

var _HandlerTypeNames = []string{
	_HandlerTypeName[0:15],
	_HandlerTypeName[15:30],
}

// HandlerTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func HandlerTypeString(s string) (HandlerType, error) {
	if val, ok := _HandlerTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _HandlerTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to HandlerType values", s)
}

// HandlerTypeValues returns all values of the enum
func HandlerTypeValues() []HandlerType {
	return _HandlerTypeValues
}

// HandlerTypeStrings returns a slice of all String values of the enum
func HandlerTypeStrings() []string {
	strs := make([]string, len(_HandlerTypeNames))
	copy(strs, _HandlerTypeNames)
	return strs
}

// IsAHandlerType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i HandlerType) IsAHandlerType() bool {
	for _, v := range _HandlerTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for HandlerType
func (i HandlerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for HandlerType
func (i *HandlerType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("HandlerType should be a string, got %s", data)
	}

	var err error
	*i, err = HandlerTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for HandlerType
func (i HandlerType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for HandlerType
func (i *HandlerType) UnmarshalText(text []byte) error {
	var err error
	*i, err = HandlerTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for HandlerType
func (i HandlerType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for HandlerType
func (i *HandlerType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = HandlerTypeString(s)
	return err
}
